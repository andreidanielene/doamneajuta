//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.04.15 at 12:34:59 AM EEST 
//


package ro.bestem.doamneajuta.service.generated.nearbylocation;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for viewportType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="viewportType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="southwest" type="{}southwestType"/>
 *         &lt;element name="northeast" type="{}northeastType"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "viewportType", propOrder = {
    "southwest",
    "northeast"
})
public class ViewportType
    implements Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected SouthwestType southwest;
    @XmlElement(required = true)
    protected NortheastType northeast;

    /**
     * Gets the value of the southwest property.
     * 
     * @return
     *     possible object is
     *     {@link SouthwestType }
     *     
     */
    public SouthwestType getSouthwest() {
        return southwest;
    }

    /**
     * Sets the value of the southwest property.
     * 
     * @param value
     *     allowed object is
     *     {@link SouthwestType }
     *     
     */
    public void setSouthwest(SouthwestType value) {
        this.southwest = value;
    }

    /**
     * Gets the value of the northeast property.
     * 
     * @return
     *     possible object is
     *     {@link NortheastType }
     *     
     */
    public NortheastType getNortheast() {
        return northeast;
    }

    /**
     * Sets the value of the northeast property.
     * 
     * @param value
     *     allowed object is
     *     {@link NortheastType }
     *     
     */
    public void setNortheast(NortheastType value) {
        this.northeast = value;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ViewportType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ViewportType that = ((ViewportType) object);
        {
            SouthwestType lhsSouthwest;
            lhsSouthwest = this.getSouthwest();
            SouthwestType rhsSouthwest;
            rhsSouthwest = that.getSouthwest();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "southwest", lhsSouthwest), LocatorUtils.property(thatLocator, "southwest", rhsSouthwest), lhsSouthwest, rhsSouthwest)) {
                return false;
            }
        }
        {
            NortheastType lhsNortheast;
            lhsNortheast = this.getNortheast();
            NortheastType rhsNortheast;
            rhsNortheast = that.getNortheast();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "northeast", lhsNortheast), LocatorUtils.property(thatLocator, "northeast", rhsNortheast), lhsNortheast, rhsNortheast)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            SouthwestType theSouthwest;
            theSouthwest = this.getSouthwest();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "southwest", theSouthwest), currentHashCode, theSouthwest);
        }
        {
            NortheastType theNortheast;
            theNortheast = this.getNortheast();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "northeast", theNortheast), currentHashCode, theNortheast);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            SouthwestType theSouthwest;
            theSouthwest = this.getSouthwest();
            strategy.appendField(locator, this, "southwest", buffer, theSouthwest);
        }
        {
            NortheastType theNortheast;
            theNortheast = this.getNortheast();
            strategy.appendField(locator, this, "northeast", buffer, theNortheast);
        }
        return buffer;
    }

}
